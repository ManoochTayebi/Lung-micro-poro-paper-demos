################################################################################
###                                                                          ###
### Created by Mahdi Manoochehrtayebi                                        ###
###                                                                          ###
### Docker Build and Push                                                    ###
###                                                                          ###
### Ã‰cole Polytechnique, Palaiseau, France                                   ###
###                                                                          ###
################################################################################

name: Build and Push Docker Image

on:
  push:
    branches:
      - master
  # Uncomment to trigger manually
  # workflow_dispatch:

jobs:
  build_docker_image:
    runs-on: ubuntu-latest
    permissions:
        contents: read
        packages: write
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx (for advanced Docker features) - DISABLED for compatibility
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # Install dependencies
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip mercurial git ca-certificates curl gnupg lsb-release

      # Set up Docker repository
      - name: Setup Docker repository
        run: |
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo DEBIAN_FRONTEND=noninteractive apt install -y tzdata
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io

      # Convert repository name to lowercase
      - name: Convert repository name to lowercase
        id: repo_name_lowercase
        run: |
          echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"
          echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo $REPO_NAME
          cat $GITHUB_ENV

      # Display Docker images
      - name: Show Docker images
        run: docker images

      # Remove existing images (if any)
      - name: Remove existing images
        run: |
          docker rmi -f ghcr.io/$REPO_NAME || true
          docker images --filter="reference=ghcr.io/$REPO_NAME" --format="{{.Repository}}:{{.Tag}}" | xargs docker rmi || true
          docker image prune -f

      # Install jupyter-repo2docker
      - name: Install jupyter-repo2docker
        run: |
          echo "Installing repo2docker..."
          python3 -m pip install jupyter-repo2docker
          echo "repo2docker version:"
          repo2docker --version
          echo "Docker version:"
          docker version

      # Test with simplified environment first
      - name: Test simplified environment
        run: |
          echo "Testing if conda can resolve the simplified environment..."
          conda env create -f .repo2docker/environment-test.yml -n test-simple || echo "Simplified environment failed"
          conda env list

      # Build the Docker image using repo2docker
      - name: Build Docker image
        run: |
          echo "Starting repo2docker build..."
          echo "Current directory: $(pwd)"
          echo "Contents of .repo2docker directory:"
          ls -la .repo2docker/
          echo "Environment variables:"
          echo "REPO_NAME=$REPO_NAME"
          echo "DOCKER_BUILDKIT=$DOCKER_BUILDKIT"
          export DOCKER_BUILDKIT=0
          echo "Running repo2docker with debug output..."
          repo2docker --debug --no-run --user-id 1000 --user-name jovyan --image-name ghcr.io/$REPO_NAME .repo2docker
          BUILD_EXIT_CODE=$?
          echo "repo2docker build completed with exit code: $BUILD_EXIT_CODE"
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "Build failed! Exit code: $BUILD_EXIT_CODE"
            exit $BUILD_EXIT_CODE
          fi
        env:
          DOCKER_BUILDKIT: 0

      # List Docker images after build (for debugging)
      - name: List Docker images after build
        run: |
          echo "Listing all Docker images:"
          docker images
          echo "Checking for our specific image:"
          docker images ghcr.io/$REPO_NAME || echo "Image ghcr.io/$REPO_NAME not found!"

      # Tag the Docker image
      - name: Tag Docker image
        run: |
          if docker images ghcr.io/$REPO_NAME --format "{{.Repository}}" | grep -q ghcr.io/$REPO_NAME; then
            echo "Image found, proceeding with tagging..."
            docker image tag ghcr.io/$REPO_NAME ghcr.io/$REPO_NAME:${{ github.sha }}
          else
            echo "ERROR: Image ghcr.io/$REPO_NAME not found! Build must have failed."
            exit 1
          fi

      # Login to GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Push Docker images to GHCR
      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/$REPO_NAME
          docker push ghcr.io/$REPO_NAME:${{ github.sha }}

      # Log out from GHCR
      - name: Log out from GHCR
        run: docker logout ghcr.io